"use strict";(self.webpackChunknote_goog_tech=self.webpackChunknote_goog_tech||[]).push([[45],{204:(l,i,p)=>{p.r(i),p.d(i,{data:()=>u});const u={key:"v-25e826a3",path:"/operating-system/chapter04.html",title:"文件管理",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:3,title:"考查点",slug:"考查点",children:[]},{level:3,title:"概念",slug:"概念",children:[]},{level:3,title:"文件逻辑结构",slug:"文件逻辑结构",children:[]},{level:3,title:"目录结构",slug:"目录结构",children:[]},{level:3,title:"文件共享",slug:"文件共享",children:[]},{level:3,title:"文件保护",slug:"文件保护",children:[]},{level:3,title:"实现",slug:"实现",children:[]},{level:3,title:"磁盘",slug:"磁盘",children:[]}],filePathRelative:"operating-system/chapter04.md",git:{updatedTime:1632884668e3,contributors:[{name:"googtech",email:"hi@goog.tech",commits:1}]}}},9736:(l,i,p)=>{p.r(i),p.d(i,{default:()=>e});const u=(0,p(6252).uE)('<h1 id="文件管理" tabindex="-1"><a class="header-anchor" href="#文件管理" aria-hidden="true">#</a> 文件管理</h1><h3 id="考查点" tabindex="-1"><a class="header-anchor" href="#考查点" aria-hidden="true">#</a> 考查点</h3><ul><li><p>考纲内容</p><ul><li><ol><li>文件系统的基础</li></ol><ul><li><p>文件的逻辑结构</p><ul><li>顺序文件</li><li>索引文件</li><li>索引顺序文件</li></ul></li><li><p>目录结构</p><ul><li>文件控制块和索引结点</li><li>单级目录结构和两级目录结构</li><li>树形目录结构</li><li>图形目录结构</li></ul></li><li><p>文件共享、文件保护、访问类型、访问控制</p></li></ul></li><li><ol start="2"><li>文件系统的实现</li></ol><ul><li>文件系统层次结构</li><li>目录实现</li><li>文件实现</li></ul></li><li><ol start="3"><li>磁盘组织与管理</li></ol><ul><li>磁盘调度算法</li><li>磁盘的管理</li></ul></li></ul></li><li><p>复习提示</p><ul><li>重点掌握文件系统的结构及其实现、磁盘的相关知识点</li></ul></li></ul><h3 id="概念" tabindex="-1"><a class="header-anchor" href="#概念" aria-hidden="true">#</a> 概念</h3><ul><li><p>文件的定义</p><ul><li>一组有意义的信息的集合</li></ul></li><li><p>文件的属性</p><ul><li>名称（唯一）、标识符（标识文件系统内文件的唯一标签）、类型、位置、大小、保护、时间</li></ul></li></ul><h3 id="文件逻辑结构" tabindex="-1"><a class="header-anchor" href="#文件逻辑结构" aria-hidden="true">#</a> 文件逻辑结构</h3><p>文件结构包括<strong>逻辑结构</strong>和<strong>物理结构</strong></p><p>1.逻辑结构是用户组织数据的结构形式, 数据组织形式来自需求（<strong>取决于用户</strong>） 2.而物理结构是操作系统组织物理存储块的结构形式（<strong>取决于文件系统设计者所采取的策略</strong>）</p><ul><li><p>无结构文件（流式文件）</p><p>由二进制流或字符流组成, 无明显的逻辑结构</p></li><li><p>有结构文件（记录式文件）</p><p>由记录组成, 分为定长记录、可变长记录</p><ul><li><p>顺序文件</p><ul><li><p>串结构</p><ul><li>记录顺序与关键字无关</li></ul></li><li><p>顺序结构</p><ul><li>记录按关键字顺序排列</li></ul></li><li><p>定长与可变长记录</p><ul><li>可变长记录的顺序文件无法实现随机存取（每次查询只能从头依次查找），定长记录可以</li><li>定长记录、顺序结构的顺序文件可以快速检索（根据关键字快速找到记录）</li></ul></li><li><p>不方便增加 / 删除记录</p></li></ul></li><li><p>索引文件</p><ul><li>解决了顺序文件中不方便增 / 删记录的问题，同时让不定长记录的文件实现了随机存取</li><li>索引表本身就是定长记录的顺序文件，一个索引表就是一条定长记录</li><li>所索引表按关键字顺序排序，则可支持快速检索</li><li>由逻辑文件和索引表组成</li></ul></li><li><p>索引顺序文件</p><ul><li>解决了索引文件中存储空间利用率过低的问题</li><li>检索记录时先按顺序查索引表，找到分组，再顺序查找分组</li><li>当记录过多时可以建立多级索引表</li></ul></li></ul></li></ul><h3 id="目录结构" tabindex="-1"><a class="header-anchor" href="#目录结构" aria-hidden="true">#</a> 目录结构</h3><ul><li><p>文件控制块（FCB）、索引结点</p><ul><li><p>文件控制块（FCB）</p><p>为了实现 <strong>&quot;按名存取&quot;</strong>, 在文件系统中为每个文件设置用于描述和控制文件的<strong>数据结构</strong>, 称之为文件控制块(<strong>FCB</strong>)</p><ul><li>用来存放控制文件需要的各种信息的数据结构</li><li>一个文件对应一个FCB，一个FCB就是一个目录项，多个FCB组成文件目录</li></ul></li><li><p>索引结点</p><ul><li>相对于 FCB 可减少启动磁盘次数，进而节省系统开销</li><li>文件描述信息单独形成一个称为索引结点的数据结构，简称 i 结点</li><li>存放在磁盘（外存）上的索引结点称为磁盘索引结点，当索引结点放入内存后称为内存索引节点</li></ul></li></ul></li><li><p>单级目录结构</p><ul><li><p>一个系统中只有一张目录表，不可重名、查找速度慢、不便于文件共享</p></li><li><p>单级目录结构示例图</p><ul><li></li></ul></li></ul></li><li><p>两级目录结构</p><ul><li><p>将文件目录分成主文件目录（MFD）及用户文件目录（UFD）</p></li><li><p>不同用户的文件可以重名，但是不能对文件进行分类</p></li><li><p>两级目录结构示例图</p><ul><li></li></ul></li></ul></li><li><p>树形目录结构</p><ul><li><p>不同目录下的文件可以重名，也可以对文件进行分类，但不方便文件共享</p></li><li><p>绝对路径</p><ul><li>从根目录出发的路径</li></ul></li><li><p>当前目录</p><ul><li>从当前目录出发的路径（可减少磁盘 I/O 次数）</li></ul></li><li><p>树形目录结构示例图</p><ul><li></li></ul></li></ul></li><li><p>图形目录结构</p><ul><li><p>在树形目录结构的基础上，增加了一些指向同一结点的有向边，使整个目录成为了一个有向无环图</p></li><li><p>无环图目录结构方便地实现了文件共享，但使得系统的管理变得更加复杂</p></li><li><p>为共享结点设置一个共享计数器，其为 0 时才真正删除该结点</p></li><li><p>图形目录结构示例图</p><ul><li></li></ul></li></ul></li></ul><h3 id="文件共享" tabindex="-1"><a class="header-anchor" href="#文件共享" aria-hidden="true">#</a> 文件共享</h3><ul><li><p>静态共享方法</p><ul><li><p>基于索引结点（硬链接）</p><ul><li>多个指针指向一个索引结点，保证只要还有一个指针指向索引结点，索引结点就不能删除</li><li>删除文件时，只是删除该用户的目录项，且</li><li>时才真正删除文件数据和索引结点</li></ul></li><li><p>利用符号链实现（软链接）</p><ul><li>若共享文件已被删除，而 Link 型文件仍然存在，只是无法再通过该文件中的路径去查找共享文件（找不到对应目录项）</li><li>把共享文件的路径记录下来，当要访问文件时，根据路径寻找文件（Windows 快捷方式）</li><li>访问共享文件时要查询多级目录，会有多次磁盘 I/O 操作，因此访问速度要比硬链接慢</li></ul></li><li><p>注意点：建立符号链接（软链接）时，引用计数值直接复制；建立硬链接时，引用计数值加 1</p></li></ul></li><li><p>动态共享方法</p><ul><li>允许两个进程同时对一个文件进行操作，这样的共享称为动态共享</li></ul></li></ul><h3 id="文件保护" tabindex="-1"><a class="header-anchor" href="#文件保护" aria-hidden="true">#</a> 文件保护</h3><ul><li><p>访问类型</p><ul><li>读、写、执行、添加、删除、列表清单</li></ul></li><li><p>口令保护</p><ul><li>为文件设置一个“口令”，用户想要访问文件时需要提供口令，由系统验证口令是否正确</li><li>实现开销小，但“口令”一般存放在 FCB 或索引结点中（系统中），因此不安全</li></ul></li><li><p>加密保护</p><ul><li>用一个“密码”对文件加密，用户想要访问文件时，需要提供相同的密码才能正确地解密</li><li>安全性高，但加密 / 解密需要耗费一定的时间（例如异或加密）</li></ul></li><li><p>访问控制</p><ul><li>用一个访问控制表（ACL）记录各个用户（或各组用户）对文件的访问权限</li><li>实现灵活，可以实现复杂的文件保护功能</li></ul></li></ul><h3 id="实现" tabindex="-1"><a class="header-anchor" href="#实现" aria-hidden="true">#</a> 实现</h3><p><strong>文件的实现</strong>就是研究文件的<strong>物理结构</strong>, 即文件数据在物理存储设备上是如何分布和组织的</p><ul><li><p>层次结构</p><ul><li><ol><li>用户调用接口</li></ol><ul><li>用于处理用户发出的系统调用请求（如Read、Write、Open、Close）</li></ul></li><li><ol start="2"><li>文件目录系统</li></ol><ul><li>根据用户给出的文件路径找到相应的 FCB 或索引结点</li></ul></li><li><ol start="3"><li>存取控制验证模块</li></ol><ul><li>验证用户是否有访问权限，以确保访问的合法性</li></ul></li><li><ol start="4"><li>逻辑文件系统与文件信息缓冲区</li></ol><ul><li>将记录号转换为对应的逻辑地址</li></ul></li><li><ol start="5"><li>物理文件系统</li></ol><ul><li>将文件逻辑地址转换为实际的物理地址</li></ul></li><li><ol start="6"><li>辅助分配模块</li></ol><ul><li>负责文件存储空间的管理，即分配与回收</li></ul></li><li><ol start="7"><li>设备管理程序模块</li></ol><ul><li>直接与硬件交互，负责和硬件直接相关的一些管理工作</li></ul></li></ul></li><li><p>目录实现</p><p>注意: 目录的实现是为了<strong>查找</strong></p><ul><li><p>线性表（对应线性查找）</p><ul><li>优点：实现简单</li><li>缺点：费时</li></ul></li><li><p>哈希表（对应散列查找）</p><ul><li>优点：查找迅速、插入和删除也较简单</li><li>缺点：需要一些预备策略来避免冲突</li></ul></li></ul></li><li><p>文件分配</p><ul><li><p>连续分配</p><ul><li>支持顺序访问与直接访问</li><li>优点：实现简单，存取速度快</li><li>缺点：文件长度不宜动态增加，反复删除文件后会产生外部碎片，仅适用于长度固定的文件</li></ul></li><li><p>链接分配</p><ul><li><p>优点：可解决外部碎片问题，动态增长较方便</p></li><li><p>缺点：只能通过指针顺序访问文件，查找效率低且指针信息消耗外存空间</p></li><li><p>分类</p><ul><li><p>隐式链接</p></li><li><p>显示链接</p><ul><li><p>文件分配表（File Allocation Table）</p><p>操作系统可以通过<strong>FAT</strong>对文件存储空间进行管理</p></li></ul></li></ul></li></ul></li><li><p>索引分配</p><ul><li><p>优点：解决链接分配不能有效支持直接访问（FAT），及连续分配含有外部碎片的问题</p><p><strong>随机访问</strong>且<strong>易扩展</strong>是索引结构的特性</p></li><li><p>缺点：索引表增加了存储空间的开销</p></li><li><p>解决索引块太小无法支持大文件的方法</p><ul><li>链接方案、多层索引、混合索引</li></ul></li></ul></li><li><p>文件三种分配方式的比较示例图</p><ul><li></li></ul></li></ul></li><li><p>存储空间管理</p><p>文件存储空间管理即文件<strong>空闲</strong>空间管理</p><ul><li><p>空闲表法</p></li><li><p>空闲链表法</p></li><li><p>位示图法</p></li><li><p>成组链表法</p><p>结合空闲表和空闲链表两种方法</p></li></ul></li></ul><h3 id="磁盘" tabindex="-1"><a class="header-anchor" href="#磁盘" aria-hidden="true">#</a> 磁盘</h3><ul><li><p>基本概念</p><ul><li><p>磁盘、磁道、扇区</p><ul><li>磁盘由表面涂有磁性物质的圆形盘片组成</li><li>每个盘片被划分为一个个磁道，每个磁道又划分为一个个扇区</li></ul></li><li><p>如何在磁盘中读 / 写数据</p><ul><li>磁头移动到目标位置，盘片旋转，对应扇区划过磁道才能完成读 / 写</li></ul></li><li><p>盘面、柱面</p><ul><li>磁盘有多个盘面 “摞”起来，每个盘片有两个盘面</li><li>所有盘面中相对位置相同的磁道组成柱面</li></ul></li><li><p>磁盘的物理地址</p><ul><li>由 柱面号 ● 盘面号 ● 扇区号（或块号）组成</li></ul></li><li><p>磁盘的分类</p><ul><li><p>根据磁头是否可移动</p><ul><li>固定头磁盘（每个磁道有一个磁头）</li><li>移动头磁盘（每个盘面只有一个磁头）</li></ul></li><li><p>根据磁盘是否可更换</p><ul><li>固定盘磁盘</li><li>可换盘磁盘</li></ul></li></ul></li></ul></li><li><p>访问时间</p><p>一次磁盘读写操作的时间由<strong>寻找（寻道）时间</strong>、<strong>旋转延迟时间</strong>和<strong>传输时间</strong>所决定</p><ul><li><p>寻道时间</p><ul><li>将磁头移动到指定磁道所需要的时间</li><li>因要移动磁臂，故占用时间最长</li></ul></li><li><p>延迟时间</p><ul><li>将磁头定位到某一磁道的扇区（块号）所需要的时间</li></ul></li><li><p>传输时间</p><ul><li>从磁盘读取或向磁盘写入数据所经历的时间</li></ul></li><li><p>注意点</p><ul><li>寻道、延迟时间属于“找”的时间，都可以进行优化</li><li>传输时间由磁盘本身性质所决定的，不可以进行优化</li></ul></li></ul></li><li><p>调度算法</p><p>磁盘调度的目的是缩短<strong>找道(即寻)时间</strong></p><ul><li><p>先来先服务（FCFS）</p><ul><li>根据进程请求访问磁盘的先后顺序进行调度</li></ul></li><li><p>最短寻找时间优先（SSTF）</p><ul><li>处理与当前磁头所在磁道距离最近的磁道，以便使每次的寻找时间最短</li></ul></li><li><p>扫描算法（SCAN）</p><ul><li>在 SSTF 算法的基础上规定了磁头的运动方向，如沿磁道号增大的顺序移动</li></ul></li><li><p>循环扫描（C-SCAN）</p><ul><li>解决了 SCAN 算法对于各个位置磁道的响应频率不平均的问题</li></ul></li><li><p>四种磁盘调度算法的优缺点示例图</p><ul><li></li></ul></li></ul></li><li><p>磁盘的管理</p><ul><li><p>初始化</p><ul><li><ol><li>低级格式化/物理格式化，即划分扇区及为每个扇区采用特别的数据结构，包括校验码</li></ol></li><li><ol start="2"><li>将磁盘分为一个或多个柱面组成的分区（如C、D、E盘），每个分区可作为一个独立的磁盘</li></ol></li><li><ol start="3"><li>对物理分区进行逻辑格式化，即建立文件系统，将初始的文件系统数据结构存储道磁盘上</li></ol></li></ul></li><li><p>引导块</p><ul><li>计算机启动时需要运行初始化程序（自举程序）来完成初始化</li><li>ROM中存放很小的自举装入程序，完整的存放在初始块（引导块）中</li></ul></li><li><p>坏块</p><ul><li>简单的磁盘：逻辑格式化时将坏块标记出来，对操作系统不透明</li><li>复杂的扇区：磁盘控制器维护一个坏块链，并管理备用扇区，对操作系统透明</li></ul></li></ul></li></ul>',20),e={render:function(l,i){return u}}}}]);