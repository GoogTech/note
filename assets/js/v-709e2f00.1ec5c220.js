"use strict";(self.webpackChunknote_goog_tech=self.webpackChunknote_goog_tech||[]).push([[646],{8897:(l,i,u)=>{u.r(i),u.d(i,{data:()=>e});const e={key:"v-709e2f00",path:"/computer-network/chapter06.html",title:"应用层",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:3,title:"网络应用模型",slug:"网络应用模型",children:[]},{level:3,title:"域名系统（DNS）",slug:"域名系统-dns",children:[]},{level:3,title:"文件传输协议（FTP）",slug:"文件传输协议-ftp",children:[]},{level:3,title:"电子邮件（E-mail）",slug:"电子邮件-e-mail",children:[]},{level:3,title:"万维网（WWW）",slug:"万维网-www",children:[]}],filePathRelative:"computer-network/chapter06.md",git:{updatedTime:1632897486e3,contributors:[{name:"googtech",email:"hi@goog.tech",commits:1}]}}},2341:(l,i,u)=>{u.r(i),u.d(i,{default:()=>p});const e=(0,u(6252).uE)('<h1 id="应用层" tabindex="-1"><a class="header-anchor" href="#应用层" aria-hidden="true">#</a> 应用层</h1><h3 id="网络应用模型" tabindex="-1"><a class="header-anchor" href="#网络应用模型" aria-hidden="true">#</a> 网络应用模型</h3><ul><li><p>客户/服务器模型</p><ul><li>主机（Client）：服务请求方，必须知道服务器程序地址</li><li>服务器（Server）：服务提供方，不需要知道客户程序的地址</li></ul></li><li><p>P2P模型</p><ul><li><p>每个结点既可以作为客户机，也可以作为服务器</p></li><li><p>任意一对计算机，即对等方（Peer），直接相互通信</p></li><li><p>优缺点</p><ul><li>优点为：减轻计算压力，消除依赖性，提高系统效率和资源利用率</li><li>缺点为：获取服务的同时还要提供服务，故导致占用较多的内存，影响整机速度</li></ul></li></ul></li></ul><h3 id="域名系统-dns" tabindex="-1"><a class="header-anchor" href="#域名系统-dns" aria-hidden="true">#</a> 域名系统（DNS）</h3><p>Domain Name System</p><ul><li><p>用于将具有特定含义的主机名转换为便于机器处理的IP地址</p></li><li><p>采用客户/服务器模型、协议运行在UDP之上、使用 53 号端口</p></li><li><p>顶级域名分类</p><ul><li>国家顶级域名（nTLD）：例如&quot;.cn&quot;、&quot;.us&quot;、&quot;.uk&quot;</li><li>通用顶级域名（gTLD）：例如&quot;.com&quot;、&quot;.cn&quot;、&quot;.net&quot;</li><li>基础结构域名：例如&quot;arpa&quot;（IP —&gt;Domain）</li></ul></li><li><p>域名服务器</p><p>Top Level Domain(<strong>TLD</strong>)</p><ul><li><p>根域名服务器</p><ul><li>负责管理顶级域，告诉本地域名服务器下一步应当找哪个顶级域名服务器进行查询</li></ul></li><li><p>顶级域名服务器</p><ul><li>负责管理在该服务器上注册的所有二级域名，给出相应的IP地址或下一步域名服务器的IP地址</li></ul></li><li><p>权限域名服务器</p><ul><li>每台主机必须在此进行登记，故其总能将其管辖的主机名转换成该主机的IP地址</li></ul></li><li><p>本地域名服务器</p><ul><li>负责接收每台主机发出的DNS查询请求报文，替代主机查询给定域名的IP地址</li></ul></li></ul></li><li><p>解析方式</p><ul><li>递归与迭代相结合的查询</li><li>递归查询（对根域名服务器造成的负载过大，几乎不适用）</li></ul></li></ul><h3 id="文件传输协议-ftp" tabindex="-1"><a class="header-anchor" href="#文件传输协议-ftp" aria-hidden="true">#</a> 文件传输协议（FTP）</h3><p>File Transfer Protocol</p><ul><li><p>为因特网上使用得最广泛的文件传输协议</p></li><li><p>功能</p><ul><li>文件传输、文件管理、文件共享</li></ul></li><li><p>服务器进程</p><ul><li>主进程：负责接收新的请求</li><li>若干从属进程：负责处理单个请求</li></ul></li><li><p>服务器连接</p><ul><li><p>控制连接</p><ul><li>端口号为21，用来传输控制信息</li><li>控制信息都以 7 位的 ASCII 格式进行传送</li></ul></li><li><p>数据连接</p><ul><li><p>端口号位20，用来连接客户端和服务端的数据传送进程</p></li><li><p>主动模式PORT</p><ul><li>传输数据是 &quot;服务器&quot; 连接到 &quot;客户端&quot; 的端口</li><li>使用TCP 20端口</li></ul></li><li><p>被动模式PASV</p><ul><li>传输数据是 &quot;客户端&quot; 连接到 &quot;服务器&quot; 的端口</li><li>端口号由服务器和客户端自行协商决定</li></ul></li></ul></li></ul></li></ul><h3 id="电子邮件-e-mail" tabindex="-1"><a class="header-anchor" href="#电子邮件-e-mail" aria-hidden="true">#</a> 电子邮件（E-mail）</h3><ul><li><p>用户代理（UA）</p><ul><li>是指运行在PC上的程序，如电子邮件客户端软件</li></ul></li><li><p>邮件服务器</p><ul><li>功能为发送和接收邮件，采用C/S工作方式</li></ul></li><li><p>协议</p><ul><li><p>发送协议（SMTP）</p><p>Simple Mail Transfer Protocol</p><ul><li>使用TCP连接、端口号为25、采用C/S工作方式</li><li>用于用户代理向邮件服务器发送邮件或在邮件服务之间发送邮件</li><li>因仅限于传送 7 位ASCII码，故提出了多用途网际邮件扩充（MIME）使得传输内容丰富多彩</li></ul></li><li><p>接收协议（POP3）</p><p>Post Office Protocol</p><ul><li>使用TCP连接、端口号为110、采用C/S工作方式</li><li>用于用户代理从邮件服务器读取邮件</li><li>另一个邮件读取协议为因特网报文存取协议（IMAP），适用于多音频或视频的大邮件</li></ul></li></ul></li></ul><h3 id="万维网-www" tabindex="-1"><a class="header-anchor" href="#万维网-www" aria-hidden="true">#</a> 万维网（WWW）</h3><p>World Wide Web</p><ul><li><p>统一资源定位符（URL）</p><ul><li>: // : /</li></ul></li><li><p>超文本标记语言（HTML）</p><ul><li>以一种约定的标记对页面上的各种信息、格式进行描述</li></ul></li><li><p>超文本传输协议（HTTP）</p><ul><li><p>无连接、无状态</p><ul><li>无连接：通信双方在交换HTTP报文之前不需要先建立HTTP连接</li><li>无状态：服务器对曾经来访的客户并无记忆，进而使得其更易支持大量并发的HTTP请求</li></ul></li><li><p>非持久连接、持久连接</p><ul><li><p>非持久连接：每个网页元素对象的传输都需要单独建立一个TCP连接</p></li><li><p>持久连接（HTTP/1.1）</p><ul><li>流水线：客户可以逐个地连续发出对各个引用对象的请求</li><li>非流水线：客户在收到响应后才能发出下一个请求（浪费服务器资源）</li></ul></li></ul></li><li><p>报文</p><ul><li>请求报文：从客户向服务器发送的请求报文</li><li>响应报文：从服务器到客户的回答</li></ul></li></ul></li></ul>',14),p={render:function(l,i){return e}}}}]);