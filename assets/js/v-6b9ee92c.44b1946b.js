"use strict";(self.webpackChunknote_goog_tech=self.webpackChunknote_goog_tech||[]).push([[343],{6581:(l,i,u)=>{u.r(i),u.d(i,{data:()=>p});const p={key:"v-6b9ee92c",path:"/data-structure/chapter08.html",title:"排序",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:3,title:"考查点",slug:"考查点",children:[]},{level:3,title:"基本概念",slug:"基本概念",children:[]},{level:3,title:"内部排序",slug:"内部排序",children:[]},{level:3,title:"外部排序",slug:"外部排序",children:[]}],filePathRelative:"data-structure/chapter08.md",git:{updatedTime:1632809745e3,contributors:[{name:"googtech",email:"hi@goog.tech",commits:1}]}}},2176:(l,i,u)=>{u.r(i),u.d(i,{default:()=>t});const p=(0,u(6252).uE)('<h1 id="排序" tabindex="-1"><a class="header-anchor" href="#排序" aria-hidden="true">#</a> 排序</h1><h3 id="考查点" tabindex="-1"><a class="header-anchor" href="#考查点" aria-hidden="true">#</a> 考查点</h3><ul><li><p>考纲内容</p><ul><li><ol><li>排序的基本概念</li></ol></li><li><ol start="2"><li>插入排序</li></ol><ul><li>直接插入排序</li><li>折半插入排序</li><li>希尔排序</li></ul></li><li><ol start="3"><li>交换排序</li></ol><ul><li>冒泡排序</li><li>快速排序</li></ul></li><li><ol start="4"><li>选择排序</li></ol><ul><li>简单选择排序</li><li>堆排序</li></ul></li><li><ol start="5"><li>2路归并排序</li></ol></li><li><ol start="6"><li>基数排序</li></ol></li><li><ol start="7"><li>外部排序</li></ol></li><li><ol start="8"><li>各种排序算法的比较</li></ol></li><li><ol start="9"><li>排序算法的应用</li></ol></li></ul></li><li><p>复习提示</p><ul><li>堆排序、快速排序、归并排序是本章的重难点</li></ul></li></ul><h3 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念" aria-hidden="true">#</a> 基本概念</h3><ul><li><p>稳定性</p><ul><li>是指排序后，关键字相同的元素在顺序表中的相对位置是否改变</li></ul></li><li><p>衡量标准</p><ul><li><p>各种排序算法的性质示例图</p><ul><li></li></ul></li></ul></li></ul><h3 id="内部排序" tabindex="-1"><a class="header-anchor" href="#内部排序" aria-hidden="true">#</a> 内部排序</h3><p>是指排序期间元素全部存放在<strong>内存</strong>中的排序.</p><ul><li><p>插入排序</p><ul><li><p>直接插入与折半插入排序</p><ul><li><p>算法思想</p><p>每次将一个待排序的记录按其关键字大小插入到前面<strong>已排好序的子序列</strong>中，直到全部记录插入完成.</p></li><li><p>直接插入排序</p><ul><li>顺序查找待插入的位置，适用于顺序表及链表</li></ul></li><li><p>折半插入排序</p><ul><li>折半查找待插入的位置，仅适用于顺序表</li></ul></li><li><p>性能</p><ul><li>空间复杂度为</li><li>平均时间复杂度为</li><li>稳定</li></ul></li><li><p>图例</p><ul><li></li></ul></li><li><p>Java 代码实现</p><ul><li><p>直接插入排序</p><ul><li></li></ul></li><li><p>折半插入排序</p><ul><li></li></ul></li></ul></li></ul></li><li><p>希尔排序</p><ul><li><p>算法思想</p><p>把相隔某个“<strong>增量</strong>”的记录组成一个子表，对各个子表分别进行直接插入排序，当整个表中的元素已呈“基本有序”时，再对全体记录进行一次直接插入排序.</p></li><li><p>适用性</p><ul><li>仅适用于线性表为顺序存储的情况</li></ul></li><li><p>性能</p><ul><li>空间复杂度为</li><li>平均时间复杂度尚未知（数学难题）</li><li>不稳定</li></ul></li><li><p>图例</p><ul><li></li></ul></li><li><p>Java 代码实现</p><ul><li></li></ul></li></ul></li></ul></li><li><p>交换排序</p><ul><li><p>冒泡排序</p><ul><li>算法思想</li></ul><pre><code>从后往前(或从前往后)两两比较相邻元素的值, 若为逆序(即**A[i-1] &gt; A[i]**), 则交换它们, 直到序列比较完.\n</code></pre><ul><li><p>性能</p><ul><li>空间复杂度为</li><li>平均时间复杂度为</li><li>不稳定</li></ul></li><li><p>注意点</p><ul><li>冒泡排序中产生的有序子序列一定是全局有序的（不同于直接插入排序是局部有序的）</li></ul></li><li><p>图例</p><ul><li></li></ul></li><li><p>Java 代码实现</p><ul><li></li></ul></li></ul></li><li><p>快速排序</p><ul><li><p>算法思想</p><p>1.在待排序的元素中任取一个元素作为基准(通常取第一个, 但最好随机取哈), 称为<strong>基准元素</strong>. 2.将待排序的元素进行区分, 比基准元素大的元素放在它的右边, 比其小的放在它的左边. 3.对左右两个分区重复以上步骤, 直到所有元素都是有序的.</p></li></ul></li><li><p>性能</p><ul><li>空间复杂度为 <ul><li>平均时间复杂度为</li><li>不稳定</li></ul></li></ul></li><li><p>注意点</p><ul><li>快排中并不产生有序子序列，每趟排序后会将基准元素放到其最终位置</li></ul></li><li><p>图例</p><ul><li></li></ul></li><li><p>Java 代码实现</p><ul><li></li></ul></li></ul></li><li><p>选择排序</p><ul><li><p>简单选择排序</p><ul><li><p>算法思想</p><ul><li>每一趟在待排序元素中选取关键字最小的元素加入有序子序列，总共进行 \ufeff 趟处理</li></ul></li><li><p>性能</p><ul><li>空间复杂度为</li><li>平均时间复杂度为</li><li>不稳定</li></ul></li><li><p>适用性</p><ul><li>顺序表、链表</li></ul></li><li><p>Java 代码实现</p><ul><li></li></ul></li></ul></li><li><p>堆排序</p><ul><li><p>复习完全二叉树的概念</p><ul><li>结点 \ufeff 的左孩子是 \ufeff，右孩子是 \ufeff，父节点为</li><li>编号 \ufeff 的结点为分支结点</li></ul></li><li><p>性能</p><ul><li>空间夫再度为</li><li>平均时间复杂度为</li><li>不稳定</li></ul></li><li><p>区分</p><ul><li>大根堆（根 &gt;= 左、右）构造的堆的节点值从上到下依次减小</li><li>小根堆（根 &lt;= 左、右）构造的堆的节点值从上到下依次增大</li></ul></li><li><p>适用性</p><ul><li>适用于关键字较多的情况 1000)&quot; contenteditable=&quot;false&quot;&gt;\ufeff，例如在1亿个数中选出前100个最大值</li></ul></li><li><p>图例</p><ul><li></li></ul></li><li><p>Java 代码实现</p><ul><li></li></ul></li></ul></li></ul></li><li><p>归并排序</p><ul><li><p>算法思想</p><ul><li>将两个或两个以上的有序表组合成一个新的有序表（2路归并为二合一，进而 k 路归并为 k 合一）</li></ul></li><li><p>性能</p><ul><li>空间复杂度为</li><li>平均时间复杂度为</li><li>稳定</li></ul></li><li><p>图例</p><ul><li></li></ul></li><li><p>Java 代码实现</p><ul><li></li></ul></li></ul></li><li><p>基数排序</p><ul><li><p>算法思想</p><ul><li><ol><li>将整个关键字拆分为 d 位（或 &quot;组&quot;）</li></ol></li><li><ol start="2"><li>按照各个关键字位权重递增的次序（如个、十、百）做 d 趟 “分配”和“收集”</li></ol></li><li><ol start="3"><li>分配：顺序扫描各个元素，根据当前处理的关键字位，将元素插入相应队列，一趟分配耗时 O(n)</li></ol></li><li><ol start="4"><li>收集：把各个队列中的结点依次出队并链接，一趟收集耗时 O(r)</li></ol></li></ul></li><li><p>性能</p><ul><li>空间复杂度为</li><li>时间复杂度为</li><li>稳定</li></ul></li><li><p>注意点</p><ul><li>基数排序不能对 \ufeff 和 \ufeff 类型的实数进行排序</li></ul></li><li><p>图例</p><ul><li>初始序列： 109 —&gt; 063 —&gt; 930 —&gt; 589 —&gt; 184 —&gt; 505 —&gt; 269 —&gt; 008 —&gt; 083&quot;&gt;</li></ul></li><li><p>Java 代码实现</p><ul><li></li></ul></li></ul></li><li><p>总结</p><ul><li><ol><li>经过一趟排序后，插入排序、归并排序、希尔排序不能确定一个元素的最终位置</li></ol></li><li><ol start="2"><li>选择排序、归并排序、插入排序、基数排序的比较次数与初始状态无关</li></ol></li><li><ol start="3"><li>算法的使用场景（\ufeff为元素数目）</li></ol><ul><li>3.1 当 \ufeff 较小时建议使用直插或简单选择排序</li><li>3.2 当 \ufeff 较大时建议使用快排、堆排序或归并排序</li><li>3.3 当 \ufeff 很大，关键字位数较少且可分解时，建议使用基数排序</li><li>3.4 当记录本身信息量较大时，为了避免耗费大量时间移动记录，建议使用链表作为存储结构</li></ul></li></ul></li></ul><h3 id="外部排序" tabindex="-1"><a class="header-anchor" href="#外部排序" aria-hidden="true">#</a> 外部排序</h3><p>是指排序期间元素无法同时存放在内存中, 必须在排序的过程中根据要求不断地在<strong>内、外存</strong>之间移动的排序.</p><ul><li>多路归并排序（较抽象）</li></ul>',11),t={render:function(l,i){return p}}}}]);