"use strict";(self.webpackChunknote_goog_tech=self.webpackChunknote_goog_tech||[]).push([[119],{1454:(l,i,e)=>{e.r(i),e.d(i,{data:()=>u});const u={key:"v-6f089a6a",path:"/data-structure/chapter07.html",title:"查找",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:3,title:"考查点",slug:"考查点",children:[]},{level:3,title:"基本概念",slug:"基本概念",children:[]},{level:3,title:"线性结构",slug:"线性结构",children:[]},{level:3,title:"树形结构",slug:"树形结构",children:[]},{level:3,title:"散列结构",slug:"散列结构",children:[]},{level:3,title:"效率指标",slug:"效率指标",children:[]}],filePathRelative:"data-structure/chapter07.md",git:{updatedTime:1632809745e3,contributors:[{name:"googtech",email:"hi@goog.tech",commits:1}]}}},3122:(l,i,e)=>{e.r(i),e.d(i,{default:()=>t});const u=(0,e(6252).uE)('<h1 id="查找" tabindex="-1"><a class="header-anchor" href="#查找" aria-hidden="true">#</a> 查找</h1><h3 id="考查点" tabindex="-1"><a class="header-anchor" href="#考查点" aria-hidden="true">#</a> 考查点</h3><ul><li><p>考纲内容</p><ul><li><ol><li>查找的基本概念</li></ol></li><li><ol start="2"><li>顺序查找法</li></ol></li><li><ol start="3"><li>分块查找法</li></ol></li><li><ol start="4"><li>折半查找法</li></ol></li><li><ol start="5"><li>B树及其基本操作、B+树的基本概念</li></ol></li><li><ol start="6"><li>散列表</li></ol></li><li><ol start="7"><li>查找算法的分析及应用</li></ol></li></ul></li><li><p>复习提示</p><ul><li>本章为考研命题的重点，主要考查散列查找与折半查找</li></ul></li></ul><h3 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念" aria-hidden="true">#</a> 基本概念</h3><ul><li><p>静态查找表</p><ul><li>仅查询特定数据，及检索满足条件的特定数据的属性</li></ul></li><li><p>动态查找表</p><ul><li>相对于静态查找表，则需要动态插入或删除</li></ul></li></ul><h3 id="线性结构" tabindex="-1"><a class="header-anchor" href="#线性结构" aria-hidden="true">#</a> 线性结构</h3><ul><li><p>顺序查找</p><p>又称为线性查找，主要用于在<strong>线性表</strong>中进行查找</p><ul><li><p>无序线性表的顺序查找</p></li><li><p>有序的顺序表的顺序查找</p><ul><li>圆形节点表示有序顺序表中存在的元素，而矩形结点称为失败结点.</li></ul></li></ul></li><li><p>折半查找</p><p>又称二分查找, 它适用于<strong>有序</strong>的顺序表</p><ul><li><p>仅适用于顺序存储结构，且要求元素按关键字有序序列</p><ul><li>判定树是一棵平衡二叉树</li></ul></li></ul></li><li><p>分块查找</p><p>又称索引顺序查找, 它吸取了<strong>顺序</strong>及<strong>折半查找</strong>各自的优点, 即有动态结构又适于快速查找.</p><ul><li><p>将查找表分为若干子块，块内元素无需，块间元素有序</p><ul><li>查找过程：先利用折半或顺序查找法确定记录所在块，然后在块内顺序查找.</li></ul></li></ul></li></ul><h3 id="树形结构" tabindex="-1"><a class="header-anchor" href="#树形结构" aria-hidden="true">#</a> 树形结构</h3><ul><li>二叉排序树</li><li>二叉平衡树</li><li>B树</li></ul><p>又称多路平衡查找树</p><pre><code>- 是所有结点的平衡因子均等于 0 的多路平衡查找树\n\n\t- 5 阶是指终端阶段最多有 5 个分叉\n</code></pre><ul><li><p>B+树</p><ul><li><p>是应数据库所需而出现的一种B树的变形树</p><ul><li>无论查找成功与否，每次查找都是一条从根结点到叶结点的路径</li></ul></li></ul></li></ul><h3 id="散列结构" tabindex="-1"><a class="header-anchor" href="#散列结构" aria-hidden="true">#</a> 散列结构</h3><ul><li><p>散列表</p><ul><li><p>散列函数</p><ul><li><p>直接定址法</p><ul><li>或</li></ul></li><li><p>除留余数法</p><ul><li>，\ufeff是不大于表长的质数</li></ul></li><li><p>数字分析法</p><ul><li>选取数码分布较为均匀的若干位数作为散列地址</li></ul></li><li><p>平法取中法</p><ul><li>选取关键字的平方值的中间几位作为散列地址</li></ul></li></ul></li><li><p>冲突处理</p><ul><li><p>开发地址法</p><ul><li><p>线性探测法（有聚集现象）</p><ul><li></li></ul></li><li><p>平法探测法</p><ul><li></li></ul></li><li><p>再散列法</p><ul><li></li><li></li></ul></li><li><p>伪随机序列法</p><ul><li></li></ul></li></ul></li><li><p>拉链法（又称链地址法，无聚集现象）</p><ul><li>同义词串成一个链表</li></ul></li></ul></li><li><p>性能分析</p><ul><li>查找效率主要取决于散列函数、处理冲突的方法、填充因子</li></ul></li></ul></li></ul><h3 id="效率指标" tabindex="-1"><a class="header-anchor" href="#效率指标" aria-hidden="true">#</a> 效率指标</h3><ul><li><p>平均查找长度</p><p>是指所有查找过程中进行关键字的比较次数的平均值, 也是衡量查找算法<strong>效率</strong>的最主要的指标.</p><ul><li>查找成功</li><li>查找失败</li></ul></li></ul>',16),t={render:function(l,i){return u}}}}]);