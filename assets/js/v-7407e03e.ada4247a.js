"use strict";(self.webpackChunknote_goog_tech=self.webpackChunknote_goog_tech||[]).push([[861],{2271:(l,i,p)=>{p.r(i),p.d(i,{data:()=>u});const u={key:"v-7407e03e",path:"/computer-network/chapter05.html",title:"传输层",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:3,title:"功能",slug:"功能",children:[]},{level:3,title:"端口",slug:"端口",children:[]},{level:3,title:"UDP",slug:"udp",children:[]},{level:3,title:"TCP",slug:"tcp",children:[]}],filePathRelative:"computer-network/chapter05.md",git:{updatedTime:1632897486e3,contributors:[{name:"googtech",email:"hi@goog.tech",commits:1}]}}},3997:(l,i,p)=>{p.r(i),p.d(i,{default:()=>e});const u=(0,p(6252).uE)('<h1 id="传输层" tabindex="-1"><a class="header-anchor" href="#传输层" aria-hidden="true">#</a> 传输层</h1><h3 id="功能" tabindex="-1"><a class="header-anchor" href="#功能" aria-hidden="true">#</a> 功能</h3><ul><li><ol><li>提供应用进程之间端到端之间的逻辑通信</li></ol></li><li><ol start="2"><li>复用和分用</li></ol></li><li><ol start="3"><li>对收到的报文进行差错检测</li></ol></li><li><ol start="4"><li>提供两种不同的传输协议（UDP、TCP）</li></ol></li></ul><h3 id="端口" tabindex="-1"><a class="header-anchor" href="#端口" aria-hidden="true">#</a> 端口</h3><ul><li><p>端口号长度为 16 bit，故可表示 65535 个不同的端口</p></li><li><p>分类</p><ul><li><p>服务器端</p><ul><li>熟知端口号：派给TCP/IP最重要的一些应用程序，范围为 0 ~ 1023</li><li>登记端口号：供给没有熟知端口号的应用程序，范围为 1024 ~ 49151</li></ul></li><li><p>客户端</p><ul><li>临时端口号：仅在客户端运行时才动态地选择，范围为 49152 ~ 65535</li></ul></li></ul></li><li><p>扩展</p><ul><li>数据链路层的SAP是MAC地址</li><li>传输层的SAP是端口地址</li><li>网络层的SAP是IP地址</li></ul></li></ul><h3 id="udp" tabindex="-1"><a class="header-anchor" href="#udp" aria-hidden="true">#</a> UDP</h3><ul><li><p>在IP的数据报服务之上仅增加：复用和分用、差错检测</p></li><li><p>特点</p><ul><li><ol><li>无连接，减少开销和发送数据之前的延迟</li></ol></li><li><ol start="2"><li>面向报文，适合一次性传输少量数据的网络应用</li></ol></li><li><ol start="3"><li>最大努力交付，即不保证可靠交付</li></ol></li><li><ol start="4"><li>无阻塞控制，使用很多实时应用</li></ol></li><li><ol start="5"><li>首部开销小，仅 8 B</li></ol></li></ul></li><li><p>数据报</p><ul><li>由UDP首部和用户数据组成</li><li>首部格式：源端口、目的端口、长度、校验和（各 2 B）</li></ul></li><li><p>校验</p><ul><li>通过校验和检查首部和数据部分</li><li>伪首部既不向下传送又不向上递交，也不计入长度，仅为了计算校验和</li></ul></li></ul><h3 id="tcp" tabindex="-1"><a class="header-anchor" href="#tcp" aria-hidden="true">#</a> TCP</h3><ul><li><p>是在不可靠传输的IP层之上实现的可靠的数据传输协议</p></li><li><p>特点</p><ul><li><ol><li>面向连接、字节流</li></ol></li><li><ol start="2"><li>提供全双工通信</li></ol></li><li><ol start="3"><li>一对一，即点对点</li></ol></li><li><ol start="4"><li>提供可靠的交付服务</li></ol></li></ul></li><li><p>报文段</p><ul><li><p>由首部和数据两部分组成</p></li><li><p>首部前 20B 是固定的，其长度为 4B 的整数倍</p></li><li><p>TCP报文段示例图</p><ul><li></li></ul></li></ul></li><li><p>连接管理</p><ul><li><p>建立（三次握手）</p><ul><li><ol><li>SYN = 1, seq = x</li></ol></li><li><ol start="2"><li>SYN = 1, ACK = 1, seq = y, ack = x + 1</li></ol></li><li><ol start="3"><li>ACK = 1, seq = x + 1, ack = y + 1</li></ol></li><li><p>三次握手示例图</p><ul><li></li></ul></li></ul></li><li><p>释放（四次握手）</p><ul><li><ol><li>FIN = 1, seq = u</li></ol></li><li><ol start="2"><li>ACK = 1, seq = v, ack = u + 1</li></ol></li><li><ol start="3"><li>FIN = 1, ACK = 1, seq = w, ack = u + 1</li></ol></li><li><ol start="4"><li>ACK = 1, seq = u + 1, ack = w + 1</li></ol></li><li><p>四次握手示例图</p><ul><li></li></ul></li></ul></li></ul></li><li><p>可靠传输</p><ul><li><p>校验机制（与UDP相同）</p></li><li><p>序号机制</p><ul><li>序号字段 seq 的值是指本报文段所发送的数据的第一个字节的序号</li></ul></li><li><p>确认机制</p><ul><li>确认号 ack 是指期望收到对方下一个报文段的数据的第一个字节的序号</li><li>默认采用累计确认，即TCP只确认数据流中至第一个丢失字节为止的字节</li></ul></li><li><p>重传机制</p><ul><li>超时：当计时器设置的重传时间到期但还未收到确认时，需重传这一报文段</li><li>冗余ACK：当发送发收到对同一报文段的3个冗余ACK时，即代表被确认报文段之后的报文已丢失，需立即重传（快速重传）</li></ul></li></ul></li><li><p>流量控制</p><ul><li><p>传输层定义端到端用户之间的流量控制</p></li><li><p>数据链路层定义两个中间的相邻结点的流量控制</p></li><li><p>接收窗口（rwnd）</p><ul><li>根据自己接收缓存的大小，动态地调整发送方的发送窗口的大小</li></ul></li><li><p>拥塞窗口（cwnd）</p><ul><li>根据当前网络拥塞程度的估计而确定的窗口值</li></ul></li></ul></li><li><p>拥塞控制</p><ul><li><p>接收窗口（rwnd）</p><ul><li>接收方根据目前接收缓存大小所许诺的最新窗口值，反映接收方的容量</li></ul></li><li><p>拥塞窗口（cwnd）</p><ul><li>发送发根据自己估算的网络拥塞程度而设置的窗口值，反映网络当前容量</li></ul></li><li><p>发送窗口的上限值 = min{ 接收窗口，拥塞窗口 }</p></li><li><p>慢开始和拥塞避免算法</p><ul><li><p>在TCP连接建立和网络出现超时时，采用慢开始和拥塞避免算法</p></li><li><p>慢开始</p><ul><li>每经过一次传播轮次，cwnd就会加倍（x2），其大小呈指数式增长</li></ul></li><li><p>拥塞避免算法</p><ul><li>每经过一个往返时延RTT，cwnd就会加1，其大小呈线性规律增长</li></ul></li><li><p>慢开始和拥塞避免算法的实现过程示例图</p><ul><li></li></ul></li></ul></li><li><p>快重传和快恢复</p><ul><li><p>当发送方接收到冗余ACK时，采用快重传和快恢复算法</p></li><li><p>快重传</p><ul><li>当发送方连续收到 3 个重复的ACK报文时，直接立刻重传丢失报文段，不用等待重传计时器超时</li></ul></li><li><p>快恢复</p><ul><li><p>与慢开始不同之处在于，当发送方收到 3 个冗余ACK时，它把cwnd值设置为慢开始门限ssthresh改变后的数值</p></li><li><p>快恢复算法的实现过程示例图</p><ul><li></li></ul></li></ul></li></ul></li></ul></li></ul>',9),e={render:function(l,i){return u}}}}]);